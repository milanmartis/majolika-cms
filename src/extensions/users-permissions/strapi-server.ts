export default (plugin) => {
    //
    // 1Ô∏è‚É£  OVERRIDE REGISTER ‚Äì po registr√°cii po≈°leme vlastn√Ω e‚Äëmail
    //
    const originalRegister = plugin.controllers.auth.register;
  
    plugin.controllers.auth.register = async (ctx, next) => {
      // najprv spusti p√¥vodn√Ω register (vytvor√≠ usera + ulo≈æ√≠ token)
      await originalRegister(ctx, next);
  
      const user = (ctx.response?.body as any)?.user;
      if (!user) return; // ak zlyhala registr√°cia
  
      // u≈æ potvrden√Ω = niƒç neposielame
      if (user.confirmed) return;
  
      // üîë confirmationToken je defaultne ulo≈æen√Ω Strapi pri registr√°cii
      const dbUser = await strapi.query('plugin::users-permissions.user').findOne({
        where: { id: user.id },
        select: ['confirmationToken'],
      });
  
      const token = dbUser?.confirmationToken;
      if (!token) return;
  
      // FE URL
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:4200';
      const confirmationLink = `${frontendUrl}/confirm-email?confirmation=${token}`;
  
      // Po≈°li vlastn√Ω e‚Äëmail
      await strapi.plugin('email').service('email').send({
        to: user.email,
        subject: '‚úÖ Potvrƒète svoj email',
        text: `Kliknite na tento odkaz na potvrdenie √∫ƒçtu: ${confirmationLink}`,
        html: `
          <p>ƒéakujeme za registr√°ciu.</p>
          <p><a href="${confirmationLink}">‚û° Kliknite sem pre potvrdenie emailu</a></p>
        `,
      });
  
      strapi.log.info(`üìß Custom confirmation email sent to ${user.email}`);
    };
  
    //
    // 2Ô∏è‚É£  OVERRIDE EMAIL CONFIRMATION ‚Äì vr√°time JSON namiesto redirectu
    //
    plugin.controllers.auth.emailConfirmation = async (ctx) => {
      const { confirmation } = ctx.query;
  
      if (!confirmation) {
        return ctx.badRequest('Missing confirmation token');
      }
  
      const user = await strapi
        .query('plugin::users-permissions.user')
        .findOne({ where: { confirmationToken: confirmation } });
  
      if (!user) {
        return ctx.badRequest('Invalid or expired token');
      }
  
      if (user.confirmed) {
        return ctx.send({ status: 'already_confirmed' });
      }
  
      await strapi.query('plugin::users-permissions.user').update({
        where: { id: user.id },
        data: { confirmed: true, confirmationToken: null },
      });
  
      return ctx.send({ status: 'confirmed' });
    };
  
    return plugin;
  };
  